/*    Photoshop Layer Renamer        LICENSE AGREEMENT        This program is free software: you can redistribute it and/or modify    it under the terms of the GNU General Public License as published by    the Free Software Foundation, either version 3 of the License, or    (at your option) any later version.    This program is distributed in the hope that it will be useful,    but WITHOUT ANY WARRANTY; without even the implied warranty of    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the    GNU General Public License for more details.    You should have received a copy of the GNU General Public License    along with this program.  If not, see <http://www.gnu.org/licenses/>.        DMASCanada Inc. © 2014 - 2017         */stackorder = 0;var assetSaveToFolder ;//set in Main Asset_Exporter ScripttraverseLayers = function(doc, ftn, reverse) {      function _traverse(doc, layers, ftn, reverse)       {            var ok = true;                    for (var i = 1; i <= layers.length && ok != false; i++)             {                var index = (reverse == true) ? layers.length-i : i - 1;                var layer = layers[index];                                var isVisible = layer.visible;                if (isVisible && (layer.name.indexOf(IMG) ==0 || layer.name.indexOf(TXT_LABEL) ==0 || layer.name.indexOf(TXT_HTML) ==0 || layer.name.indexOf(ANI) ==0)){                        exportLayerData(layer, ftn, ok);                                   }else if (isVisible && (layer.name.indexOf(BTN)== 0 || layer.name.indexOf(TXT_BTN)== 0)){                                                var normalLayer;                        var highlightedLayer;                        var selectedLayer;                        var disabledLayer;                                                var normalFound = false;                        var highlightedFound = false;                        var selectedFound = false;                        var disabledFound = false;                                                if(layer.typename == "LayerSet"){                                                    var subLayers = layer.layers;                                       for (var k= 0; k < subLayers.length; k++)                             {                                var subLayer = subLayers[k];                                                                    if (subLayer.name.indexOf(STATE_NORMAL) == 0)                                {                                    normalLayer = subLayer;                                    normalLayer.visible = false;                                    normalFound = true;                                                                    }else if (subLayer.name.indexOf(STATE_HIGHLIGHTED) == 0)                                {                                    highlightedLayer = subLayer;                                    highlightedLayer.visible = false;                                    highlightedFound = true;                                                                    }else if (subLayer.name.indexOf(STATE_SELECTED) == 0)                                {                                    selectedLayer = subLayer;                                    selectedLayer.visible = false;                                    selectedFound = true;                                                                    }else if (subLayer.name.indexOf(STATE_DISABLED) == 0)                                {                                    disabledLayer = subLayer;                                    disabledLayer.visible = false;                                    disabledFound = true;                                }                            }                        }                                            if (normalFound)                        {                            buttonState = STATE_NORMAL;                            normalLayer.visible = true;                            exportLayerData(layer, ftn, ok);                              normalLayer.visible = false;                                                     }else                        {                            buttonState = STATE_NORMAL;                            exportLayerData(layer, ftn, ok);                         }                                            if (highlightedFound)                        {                            buttonState = STATE_HIGHLIGHTED;                            highlightedLayer.visible = true;                            exportLayerData(layer, ftn, ok);                                highlightedLayer.visible = false;                        }                                                if (selectedFound)                        {                            buttonState = STATE_SELECTED;                            selectedLayer.visible = true;                            exportLayerData(layer, ftn, ok);                               selectedLayer.visible = false;                        }                                                if (disabledFound)                        {                            buttonState = STATE_DISABLED;                            disabledLayer.visible = true;                            exportLayerData(layer, ftn, ok);                              disabledLayer.visible = false;                        }                                            if (normalFound)                        {                            normalLayer.visible = true;                         }                                             buttonState = STATE_NORMAL;                  }else if(isVisible && layer.typename == "LayerSet"){                                                if(layer.name.indexOf(CONTAINER) == 0 || layer.name.indexOf(SCROLLER) == 0)                        {                            exportLayerData(layer, ftn, ok);                                                        activeDocument.trim(TrimType.TRANSPARENT,true,true,true,true);                            var previousContainer = currentContainer;                            currentContainer = layer.name;                            ok = _traverse(activeDocument, activeDocument.activeLayer.layers, ftn, reverse);                            currentContainer = previousContainer;                                                        app.activeDocument.close(SaveOptions.DONOTSAVECHANGES);                                                    }else                        {                            ok = _traverse(doc, layer.layers, ftn, reverse);                         }                 }            }            return ok;                };        return _traverse(doc, doc.layers, ftn, reverse);};function exportLayerData(aLayer, ftn, result){    stackorder = stackorder + 1;    activeDocument.activeLayer = aLayer;        dupLayers();        var bDefLayer;    var bDefFound = false;        if(activeDocument.activeLayer.typename == "LayerSet")     {        var subLayers = activeDocument.activeLayer.layers;                   for (var i= 0; i < subLayers.length && !bDefFound; i++)         {            var subLayer = subLayers[i];                                                if (subLayer.name.indexOf(BOUNDS_DEF) == 0)            {                bDefLayer = subLayer;                bDefFound = true;                bDefLayer.visible = true;            }        }    }    if(bDefFound)    {        result = ftn(activeDocument, bDefLayer, 0);            }else    {        if(activeDocument.activeLayer.typename == "LayerSet")        {            try{                activeDocument.mergeVisibleLayers();            }catch (e){            }                        result = ftn(activeDocument, activeDocument.activeLayer , 0);                        try{                executeAction( charIDToTypeID('undo'), undefined, DialogModes.NO);            }catch (e){            }                     }else        {            result = ftn(activeDocument, activeDocument.activeLayer , 0);        }    }    result = ftn(activeDocument, activeDocument.activeLayer , 1);        if(aLayer.name.indexOf(BTN) == 0 || aLayer.name.indexOf(IMG) == 0 || aLayer.name.indexOf(TXT_BTN) == 0 || aLayer.name.indexOf(ANI) == 0)    {        saveAssets(activeDocument.activeLayer , bDefLayer, bDefFound);    }     if(aLayer.name.indexOf(CONTAINER) != 0 && aLayer.name.indexOf(SCROLLER) != 0)    {        app.activeDocument.close(SaveOptions.DONOTSAVECHANGES);     }};function saveAssets(aLayer, bDef, bDefWasFound){    if(shouldSaveoutImages.value == true)    {        if(aLayer.typename == "LayerSet" && aLayer.name.indexOf(ANI) == 0)        {            var subLayers = aLayer.layers;                         for (var i= 0; i < subLayers.length; i++)             {                var subLayer = subLayers[i];                                if(subLayer.name.indexOf(IMG) == 0)                {                    subLayer.visible = false;                }            }                    for (var i= 0; i < subLayers.length; i++)             {                var subLayer = subLayers[i];                if(subLayer.name.indexOf(IMG) == 0)                {                    subLayer.visible = true;                    dupLayers();                                        var currentLayer = activeDocument.activeLayer                    var bDefLayer;                    var bDefFound = false;                                        if(currentLayer.typename == "LayerSet")                     {                        var subLayers2 = currentLayer.layers;                                   for (var j= 0; j < subLayers2.length && !bDefFound; j++)                         {                            var subLayer2 = subLayers2[j];                                                                if (subLayer2.name.indexOf(BOUNDS_DEF) == 0)                            {                                bDefLayer = subLayer2;                                bDefFound = true;                                bDefLayer.visible = true;                            }                        }                    }                                        saveOut(currentLayer, subLayer.name, bDefLayer, bDefFound)                                        app.activeDocument.close(SaveOptions.DONOTSAVECHANGES);                                        subLayer.visible = false;                }            }        } else {            saveOut(aLayer, aLayer.name, bDef, bDefWasFound)        }    }};function saveOut(aLayer, name, bDef, bDefWasFound){        activeDocument.trim(TrimType.TRANSPARENT,true,true,true,true);                turnOffText(aLayer);                if(bDefWasFound)        {            bDef.visible = false;        }                if(aLayer.typename == "LayerSet")        {            try{                activeDocument.mergeVisibleLayers();            } catch (e){            }         }        var buttonStateValue = "";        if (buttonState.indexOf(STATE_HIGHLIGHTED) == 0)        {            buttonStateValue = "_" + STATE_HIGHLIGHTED;                    }else if (buttonState.indexOf(STATE_SELECTED) == 0)        {            buttonStateValue = "_" + STATE_SELECTED;                    }else if (buttonState.indexOf(STATE_DISABLED) == 0)        {            buttonStateValue = "_" + STATE_DISABLED;        }            var saveFile;        var json = "{\n\t\"images\" : [\n"        var extension = ".png"        var size = "@3x"        var filename = name                    if(filename.indexOf(IMG) ==0) filename = filename.replace(IMG, "");                    if(filename.indexOf("_jpg_") == 0) {                filename = filename.replace("_jpg_", "");                                extension = ".jpg"                                var imagesetFolder = new Folder(oldPath + assetSaveToFolder + formatName(filename)  + buttonStateValue +".imageset/" );                imagesetFolder.create();                saveFile= File(oldPath + assetSaveToFolder  + formatName(filename)   + buttonStateValue + ".imageset/" + formatName(filename)  + buttonStateValue + size + extension);                SaveJPEG(saveFile);                size = "@2x"                resizeActivePictureAndScaleStyles(Math.round(activeDocument.width.value * 0.6666666666667));                saveFile= File(oldPath + assetSaveToFolder  + formatName(filename)   + buttonStateValue + ".imageset/" +  formatName(filename)  + buttonStateValue + size + extension);                SaveJPEG(saveFile);                size = "@1x"                resizeActivePictureAndScaleStyles(Math.round(activeDocument.width.value * 0.5));                saveFile= File(oldPath + assetSaveToFolder   + formatName(filename)   + buttonStateValue + ".imageset/" + formatName(filename)  + buttonStateValue + size + extension);                SaveJPEG(saveFile);                                json += "\t\t{\n\t\t\t\"idiom\" : \"universal\",\n\t\t\t\"scale\" : \"1x\",\n\t\t\t\"filename\" : \"" + formatName(filename)  + buttonStateValue + "@1x" + extension + "\"\n\t\t},\n"                json += "\t\t{\n\t\t\t\"idiom\" : \"universal\",\n\t\t\t\"scale\" : \"2x\",\n\t\t\t\"filename\" : \"" + formatName(filename)  + buttonStateValue + "@2x" + extension + "\"\n\t\t},\n"                json += "\t\t{\n\t\t\t\"idiom\" : \"universal\",\n\t\t\t\"scale\" : \"3x\",\n\t\t\t\"filename\" : \"" + formatName(filename)  + buttonStateValue + "@3x" + extension + "\"\n\t\t},\n"                        } else {                if(filename.indexOf("_") ==0) filename = filename.replace("_", "");                                var imagesetFolder = new Folder(oldPath + assetSaveToFolder + formatName(filename)  + buttonStateValue +".imageset/" );                imagesetFolder.create();                                saveFile= File(oldPath + assetSaveToFolder   + formatName(filename)   + buttonStateValue + ".imageset/" + formatName(filename)  + buttonStateValue + size + extension);                SavePNG(saveFile);                                size = "@2x"                resizeActivePictureAndScaleStyles(Math.round(activeDocument.width.value * 0.6666666666667));                saveFile= File(oldPath + assetSaveToFolder   + formatName(filename)   + buttonStateValue + ".imageset/" + formatName(filename)  + buttonStateValue + size + extension);                SavePNG(saveFile);                                size = "@1x"                resizeActivePictureAndScaleStyles(Math.round(activeDocument.width.value * 0.5));                saveFile= File(oldPath + assetSaveToFolder   + formatName(filename)   + buttonStateValue + ".imageset/" + formatName(filename)  + buttonStateValue + size + extension);                SavePNG(saveFile);                                json += "\t\t{\n\t\t\t\"idiom\" : \"universal\",\n\t\t\t\"scale\" : \"1x\",\n\t\t\t\"filename\" : \"" + formatName(filename)  + buttonStateValue + "@1x" + extension + "\"\n\t\t},\n"                json += "\t\t{\n\t\t\t\"idiom\" : \"universal\",\n\t\t\t\"scale\" : \"2x\",\n\t\t\t\"filename\" : \"" + formatName(filename)  + buttonStateValue + "@2x" + extension + "\"\n\t\t},\n"                json += "\t\t{\n\t\t\t\"idiom\" : \"universal\",\n\t\t\t\"scale\" : \"3x\",\n\t\t\t\"filename\" : \"" + formatName(filename)  + buttonStateValue + "@3x" + extension + "\"\n\t\t},\n"        }                saveCodeFiles(oldPath + assetSaveToFolder  + formatName(filename)  + buttonStateValue + ".imageset/" + "Contents.json", json + "\t],\n\t\"info\" : {\n\t\t\"author\" : \"xcode\",\n\t\t\"version\" : 1\n\t}\n}", "UTF-8");         };function turnOffText(aLayer){    if(aLayer.typename == "LayerSet" && (aLayer.name.indexOf(TXT_LABEL) == 0 || aLayer.name.indexOf(TXT_HTML) == 0 || aLayer.name.indexOf(TXT_BTN) == 0))    {        var txtLayers = aLayer.layers;                                    for (var j = 0; j < txtLayers.length; j++)         {            var txtLayer = txtLayers[j];                                            if (txtLayer.kind == LayerKind.TEXT)            {                txtLayer.visible = false;            }        }    }};