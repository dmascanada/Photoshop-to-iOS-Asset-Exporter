/*    Photoshop Layer Renamer        LICENSE AGREEMENT        This program is free software: you can redistribute it and/or modify    it under the terms of the GNU General Public License as published by    the Free Software Foundation, either version 3 of the License, or    (at your option) any later version.    This program is distributed in the hope that it will be useful,    but WITHOUT ANY WARRANTY; without even the implied warranty of    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the    GNU General Public License for more details.    You should have received a copy of the GNU General Public License    along with this program.  If not, see <http://www.gnu.org/licenses/>.        DMASCanada Inc. © 2014 - 2017         */main();function main() {       if (app.documents.length == 0) {                  alert("Please open a document before running this script.");          return;    }    SCRIPT_VERSION = "v1.0";    var shouldExit = false;    IMG = "img";    BTN = "btn";    TXTLBL = "txtlbl";    TXTBTN = "txtbtn";    TXTWEB = "txtweb";    VW = "vw";    SCRLV = "scrlv";    BDEF = "bdef";    ANI = "ani";        NORMAL = "normal";    HIGHLIGHTED = "highlighted";    SELECTED = "selected";    DISABLED = "disabled";        var w =new Window ("dialog", "Layer Renamer " + SCRIPT_VERSION, undefined, {closeButton: false});         var tagsGroup = w.add ("group");    tagsGroup.orientation = "row";        var leftGroup = tagsGroup.add ("group");    leftGroup.orientation = "column";    var rightGroup = tagsGroup.add ("group");    rightGroup.orientation = "column";    var imgButton = leftGroup.add ("button", undefined, IMG);    var btnButton =leftGroup.add ("button", undefined, BTN);    var txtlblButton = leftGroup.add ("button", undefined, TXTLBL);    var txtbtnButton = leftGroup.add ("button", undefined, TXTBTN);    var txtwebButton = leftGroup.add ("button", undefined, TXTWEB);    var vwButton =leftGroup.add ("button", undefined, VW);    var scrlvButton = rightGroup.add ("button", undefined, SCRLV);    var bdefButton = rightGroup.add ("button", undefined, BDEF);    var normalButton = rightGroup.add ("button", undefined, NORMAL);    var highlightedButton = rightGroup.add ("button", undefined, HIGHLIGHTED);    var selectedButton = rightGroup.add ("button", undefined, SELECTED);    var disabledButton = rightGroup.add ("button", undefined, DISABLED);        w.add ("panel", [0,0,200,3]);        var doneGroup = w.add ("group");    doneGroup.orientation = "row";        doneGroup.add ("button", undefined, "Cancel");        function updateLayerName(tagValue, shouldAppend){                var selectedLayers = getSelectedLayersIdx();                for(var a in selectedLayers){                        putLayerNameByIndex(Number(selectedLayers[a]), tagValue, shouldAppend);        }               w.close(0);    }        imgButton.onClick = function () {updateLayerName(IMG, true)};    btnButton.onClick = function () {updateLayerName(BTN, true)};    txtlblButton.onClick = function () {updateLayerName(TXTLBL, true)};    txtbtnButton.onClick = function () {updateLayerName(TXTBTN, true)};    txtwebButton.onClick = function () {updateLayerName(TXTWEB, true)};    vwButton.onClick = function () {updateLayerName(VW, true)};    scrlvButton.onClick = function () {updateLayerName(SCRLV, true)};    bdefButton.onClick = function () {updateLayerName(BDEF, true)};    normalButton.onClick = function () {updateLayerName(NORMAL, false)};    highlightedButton.onClick = function () {updateLayerName(HIGHLIGHTED, false)};    selectedButton.onClick = function () {updateLayerName(SELECTED, false)};    disabledButton.onClick = function () {updateLayerName(DISABLED, false)};     if (w.show () == 1){                 //alert("GO!");        return 0;            }else{                return 1;    }    return 0;};function getSelectedLayersIdx(){           var selectedLayers = new Array;       var ref = new ActionReference();       ref.putEnumerated( charIDToTypeID("Dcmn"), charIDToTypeID("Ordn"), charIDToTypeID("Trgt") );       var desc = executeActionGet(ref);             if( desc.hasKey( stringIDToTypeID( 'targetLayers' ) ) ){          desc = desc.getList( stringIDToTypeID( 'targetLayers' ));           var c = desc.count           var selectedLayers = new Array();           for(var i=0;i<c;i++){             try{                activeDocument.backgroundLayer;                selectedLayers.push(  desc.getReference( i ).getIndex() );             }catch(e){                selectedLayers.push(  desc.getReference( i ).getIndex()+1 );             }           }        }else{          var ref = new ActionReference();          ref.putProperty( charIDToTypeID("Prpr") , charIDToTypeID( "ItmI" ));          ref.putEnumerated( charIDToTypeID("Lyr "), charIDToTypeID("Ordn"), charIDToTypeID("Trgt") );          try{             activeDocument.backgroundLayer;             selectedLayers.push( executeActionGet(ref).getInteger(charIDToTypeID( "ItmI" ))-1);          }catch(e){             selectedLayers.push( executeActionGet(ref).getInteger(charIDToTypeID( "ItmI" )));          }      var vis = app.activeDocument.activeLayer.visible;        if(vis == true) app.activeDocument.activeLayer.visible = false;        var desc9 = new ActionDescriptor();    var list9 = new ActionList();    var ref9 = new ActionReference();    ref9.putEnumerated( charIDToTypeID('Lyr '), charIDToTypeID('Ordn'), charIDToTypeID('Trgt') );    list9.putReference( ref9 );    desc9.putList( charIDToTypeID('null'), list9 );    executeAction( charIDToTypeID('Shw '), desc9, DialogModes.NO );        if(app.activeDocument.activeLayer.visible == false) selectedLayers.shift();            app.activeDocument.activeLayer.visible = vis;              }         return selectedLayers; };function zeroPad(n, s) {        n = n.toString();         while (n.length < s) n = '0' + n;         return n; };function trim(s) {    s = s.replace(/(^\s*)|(\s*$)/gi,"");    s = s.replace(/[ ]{2,}/gi," ");     s = s.replace(/\n /,"\n"); return s;};function removeTags(layerNameValue) {        var layerName =  layerNameValue;     layerName = trim(layerName);    layerName = layerName.replace(/\s{1,}/g, "_");    var illegalChars = ",.()^%$@~`!/?<>\:*|&#;\"'";    layerName = layerName.replace(RegExp("["+illegalChars+"]","g"), "");        if(layerName.indexOf(IMG) ==0) layerName = layerName.replace(IMG, "");    else if(layerName.indexOf(BTN) ==0) layerName = layerName.replace(BTN, "");    else if(layerName.indexOf(TXTLBL) ==0) layerName = layerName.replace(TXTLBL, "");    else if(layerName.indexOf(TXTBTN) ==0) layerName = layerName.replace(TXTBTN, "");    else if(layerName.indexOf(TXTWEB) ==0) layerName = layerName.replace(TXTWEB, "");    else if(layerName.indexOf(VW) ==0) layerName = layerName.replace(VW, "");    else if(layerName.indexOf(SCRLV) ==0) layerName = layerName.replace(SCRLV, "");    else if(layerName.indexOf(BDEF) ==0) layerName = layerName.replace(BDEF, "");    else if(layerName == NORMAL) layerName = layerName.replace(NORMAL, "");    else if(layerName == HIGHLIGHTED) layerName = layerName.replace(HIGHLIGHTED, "");    else if(layerName == SELECTED) layerName = layerName.replace(SELECTED, "");    else if(layerName == DISABLED) layerName = layerName.replace(DISABLED, "");        if(layerName.indexOf("_") ==0) layerName = layerName.replace("_", "");        return layerName;};function putLayerNameByIndex( idx, name, shouldAppend ) {         if( idx == 0 ) return;         var desc = new ActionDescriptor();    var ref = new ActionReference();    ref.putIndex( charIDToTypeID( 'Lyr ' ), idx );    desc.putReference( charIDToTypeID('null'), ref );    var nameDesc = new ActionDescriptor();         var layerName =  getLayerNameByIndex(idx);    if(shouldAppend)nameDesc.putString( charIDToTypeID('Nm  '), name + "_" + removeTags(layerName) );    else nameDesc.putString( charIDToTypeID('Nm  '), name );        desc.putObject( charIDToTypeID('T   '), charIDToTypeID('Lyr '), nameDesc );    executeAction( charIDToTypeID( 'slct' ), desc, DialogModes.NO );     executeAction( charIDToTypeID('setd'), desc, DialogModes.NO );}function getLayerNameByIndex( idx ) {         var ref = new ActionReference();     ref.putProperty( charIDToTypeID("Prpr") , charIDToTypeID( "Nm  " ));     ref.putIndex( charIDToTypeID( "Lyr " ), idx );        return executeActionGet(ref).getString(charIDToTypeID( "Nm  " ));};