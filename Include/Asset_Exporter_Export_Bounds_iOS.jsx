/*    Photoshop Layer Renamer        LICENSE AGREEMENT        This program is free software: you can redistribute it and/or modify    it under the terms of the GNU General Public License as published by    the Free Software Foundation, either version 3 of the License, or    (at your option) any later version.    This program is distributed in the hope that it will be useful,    but WITHOUT ANY WARRANTY; without even the implied warranty of    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the    GNU General Public License for more details.    You should have received a copy of the GNU General Public License    along with this program.  If not, see <http://www.gnu.org/licenses/>.        DMASCanada Inc. © 2014 - 2017         */var layerData;var strXML = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n\t<key>KEY</key>\n\t<dict>\n";function exportBounds_ios(doc, layer, phaseNumber) {    if(phaseNumber == 0){                exportBounds1(doc, layer);            }else if(phaseNumber == 1){                exportBounds2(layer);    }    }function exportBounds1(doc, layer) {    layerData = cLayer(doc, layer);}function exportBounds2(layer) {    var isVisible = layer.visible;  if(isVisible){                 var strTempXML = "";                   var layerName = formatName(layer.name);                var x = Math.round(layerData.centerX/assetScale)                var y = Math.round(activeDocument.height/assetScale) - Math.round(layerData.centerY/assetScale)                        if (currentContainer != "self") {                    x = x - Math.round(activeDocument.width/assetScale)                     y = y - Math.round(activeDocument.height/assetScale)                 }                               strTempXML +=  "\t\t<key>" + layerName + "</key>\n"                                        + "\t\t<dict>\n"                                        + "\t\t\t<key>name</key>\n"                                        + "\t\t\t<string>" + layerName + "</string>\n";                                                        if(layer.name.indexOf(CONTAINER) != 0 && layer.name.indexOf(SCROLLER) != 0){                                              strTempXML +=  "\t\t\t<key>image</key>\n"                                        + "\t\t\t<string>" + layerName + "</string>\n";                }                                                       //button/////               if (layer.name.indexOf(BTN) == 0  || layer.name.indexOf(TXT_BTN) == 0){                                       strTempXML +=  "\t\t\t<key>image_highlighted</key>\n"                                            + "\t\t\t<string>" + layerName + "_highlighted</string>\n"                                            + "\t\t\t<key>image_selected</key>\n"                                            + "\t\t\t<string>" + layerName + "_selected</string>\n"                                            + "\t\t\t<key>image_disabled</key>\n"                                            + "\t\t\t<string>" + layerName + "_disabled</string>\n";                }                                                        strTempXML +=  "\t\t\t<key>x</key>\n"                                        + "\t\t\t<integer>" + x + "</integer>\n"                                        + "\t\t\t<key>y</key>\n"                                        + "\t\t\t<integer>" + y + "</integer>\n"                                        + "\t\t\t<key>width</key>\n"                                        + "\t\t\t<integer>" + Math.round((layerData.layerWidth + txtAssetWidthPadding)/assetScale) + "</integer>\n"                                        + "\t\t\t<key>height</key>\n"                                        + "\t\t\t<integer>" + Math.round((layerData.layerHeight + txtAssetHeightPadding)/assetScale)  + "</integer>\n";                                                    // text//////                if (layer.name.indexOf(TXT_LABEL) == 0 || layer.name.indexOf(TXT_HTML) == 0  || layer.name.indexOf(TXT_BTN) == 0){                                        strTempXML +=  "\t\t\t<key>textInfo</key>\n"                                         + "\t\t\t<array>\n";                                              var txtLayers;                                              if(layer.typename == "LayerSet"){                                                       txtLayers = layer.layers;                                                }else{                                                        txtLayers = new Array(1);                            txtLayers[0] = layer;                        }                            for (var j = 0; j < txtLayers.length; j++) {                                                var txtLayer = txtLayers[j];                                   if (txtLayer.visible && txtLayer.kind == LayerKind.TEXT) {                                           strTempXML += "\t\t\t\t<dict>\n"                                                    + "	\t\t\t\t\t<key>content</key>\n"                                                    + "	\t\t\t\t\t<string>" + txtLayer.textItem.contents + "</string>\n"                                                    + "	\t\t\t\t\t<key>css</key>\n"                                                    + "	\t\t\t\t\t<string></string>\n"                                                    + "	\t\t\t\t\t<key>font</key>\n"                                                    + "	\t\t\t\t\t<string>" + txtLayer.textItem.font + "</string>\n"                                                    + "	\t\t\t\t\t<key>size</key>\n"                                                    + "	\t\t\t\t\t<integer>" + Math.round(txtLayer.textItem.size/assetScale) + "</integer>\n"                                                    + "	\t\t\t\t\t<key>color</key>\n"                                                    + "	\t\t\t\t\t<string>" + txtLayer.textItem.color.rgb.hexValue + "</string>\n"                                                    + "	\t\t\t\t\t<key>horizontal_alignment</key>\n"                                                    + "	\t\t\t\t\t<string>center</string>\n"                                                    + "\t\t\t\t</dict>\n";                        }                    }                                    strTempXML +=  "\t\t\t</array>\n";                }                                       strTempXML +=  "\t\t</dict>\n";                      strXML += strTempXML.toString();  } };