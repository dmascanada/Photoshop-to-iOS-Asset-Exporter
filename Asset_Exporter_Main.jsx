/*    Photoshop to iOS Asset Exporter        LICENSE AGREEMENT        This program is free software: you can redistribute it and/or modify    it under the terms of the GNU General Public License as published by    the Free Software Foundation, either version 3 of the License, or    (at your option) any later version.    This program is distributed in the hope that it will be useful,    but WITHOUT ANY WARRANTY; without even the implied warranty of    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the    GNU General Public License for more details.    You should have received a copy of the GNU General Public License    along with this program.  If not, see <http://www.gnu.org/licenses/>.        DMASCanada Inc. © 2014 - 2017         */function main() {       if (app.documents.length == 0) {                  alert("Please open a document before running this script.");          return;    }    #include "Include/Asset_Exporter_Core_Functions.jsx"    #include "Include/Asset_Exporter_Traverse_Layers.jsx"    SCRIPT_VERSION = "v1.0";    assetScale = 3;        txtAssetWidthPadding=0;    txtAssetHeightPadding=0;    BTN = "btn";    IMG = "img";    TXT_LABEL = "txtlbl";    TXT_HTML = "txtweb";    TXT_BTN = "txtbtn";    CONTAINER = "vw";    SCROLLER = "scrlv";    BOUNDS_DEF = "bdef";    ANI = "ani";    STATE_NORMAL = "normal";    STATE_HIGHLIGHTED = "highlighted";    STATE_SELECTED = "selected";    STATE_DISABLED = "disabled";    createdFolder = false;    var shouldExit = false;    var w =new Window ("dialog", "PS to iOS Asset Exporter " + SCRIPT_VERSION, undefined, {closeButton: false});    w.alignChildren = "left";    w.orientation = "column";    w.add ("statictext", undefined, "Asset Folder Name:");    var folderName = w.add ("edittext", undefined, "_Assets");    folderName.characters = 20;    saveToSubFolder = w.add ("checkbox", undefined, "Save To Subfolder");    saveToSubFolder.value = true;    shouldSaveoutImages = w.add ("checkbox", undefined, "Save Images");    shouldSaveoutImages.value = true;    useLayerComps = w.add ("checkbox", undefined, "Use Layer Comps");    useLayerComps.value = true;        exportRetinaAssets = w.add ("checkbox", undefined, "Export for Retina");    exportRetinaAssets.value = true;        var buttonGroup = w.add ("group");    buttonGroup.orientation = "row";        var goButton = buttonGroup.add ("button", undefined, "GO");    buttonGroup.add ("button", undefined, "Cancel");        goButton.onClick = function ()    {       w.close(1);    }        saveToSubFolder.onClick = function ()    {        folderName.enabled = true;                if(saveToSubFolder.value != true){                        folderName.enabled = false;        }    }    shouldSaveoutImages.onClick = function ()    {        exportRetinaAssets.enabled = true;                if(shouldSaveoutImages.value != true){                    exportRetinaAssets.enabled = false;        }    }      if (w.show () != 1){        shouldExit = true;    }    if(shouldExit){            return 1;     }    var assetSaveToFolder = "/"+ folderName.text +"/";        if(saveToSubFolder.value != true){                assetSaveToFolder = "/";             }     var SaveFolderCopy  = assetSaveToFolder;        if(exportRetinaAssets.value != true){                assetScale = 1;     }    if(saveToSubFolder.value == true){                var myFolder = new Folder(oldPath + assetSaveToFolder );            if(!myFolder.exists)             {                   myFolder.create();                createdFolder = true;                            }else            {                alert(folderName.text  + " already exists. Overwritting existing assets");                createdFolder = true;            }        }    function analyseAndSave(tagName) {         #include "Include/Asset_Exporter_Export_Bounds_iOS.jsx"         traverseLayers(app.activeDocument, exportBounds_ios, true);         saveCodeFiles(oldPath + assetSaveToFolder  + "_" + app.activeDocument.name.match(/([^\.]+)/)[1] + tagName + ".plist", strXML + "\t</dict>\n</dict>\n</plist>", "UTF-8");    }    docCheck();    var mySourceFilePath = activeDocument.fullName.path + "/";    var compsCount = app.activeDocument.layerComps.length;    if(compsCount > 0 && useLayerComps.value == true){                for ( var d = 0; d < compsCount; d++ ){            var compRef = activeDocument.layerComps[ d ];                        compRef.apply();                        var compName =   compRef.name.match(/([^\.]+)/)[1];                if(saveToSubFolder.value == true){                        assetSaveToFolder = SaveFolderCopy + compName +"/";                var mySubFolder = new Folder(oldPath + assetSaveToFolder );                mySubFolder.create();                            }else{                                assetSaveToFolder = "/";                              }            currentLayerComp = compRef.name + "/";                        analyseAndSave("_" + compName);        }     }else{                analyseAndSave("");    }    preferences.rulerUnits = originalRulerUnits;    alert("Export Operation Complete!" + "\n" + "Images and configuration files were successfully exported to:" + "\n" + "\n" + oldPath + SaveFolderCopy );    return 0;};main();